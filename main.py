from fastapi import FastAPI, Request, Form, HTTPException
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
import httpx
import logging
import os
import sqlite3
import json

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–ô —É—Ä–æ–≤–µ–Ω—å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ ===
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s | %(levelname)-8s | %(name)s | %(funcName)s() | %(message)s',
    datefmt='%H:%M:%S'
)
logger = logging.getLogger("faucetpay-bot")

# === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
MERCHANT_USERNAME = os.getenv("MERCHANT_USERNAME")

if not TELEGRAM_TOKEN:
    logger.critical("‚ùå –û–®–ò–ë–ö–ê: –ù–µ –∑–∞–¥–∞–Ω TELEGRAM_TOKEN")
    raise ValueError("TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
if not WEBHOOK_URL:
    logger.critical("‚ùå –û–®–ò–ë–ö–ê: –ù–µ –∑–∞–¥–∞–Ω WEBHOOK_URL")
    raise ValueError("WEBHOOK_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
if not MERCHANT_USERNAME:
    logger.critical("‚ùå –û–®–ò–ë–ö–ê: –ù–µ –∑–∞–¥–∞–Ω MERCHANT_USERNAME")
    raise ValueError("MERCHANT_USERNAME –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

logger.info(f"‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã. MERCHANT_USERNAME={MERCHANT_USERNAME}")

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞ ===
try:
    telegram_app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    logger.info("‚úÖ Telegram-–±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    logger.critical(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
    raise

# === –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite ===
def init_db():
    try:
        with sqlite3.connect("users.db") as conn:
            conn.execute("CREATE TABLE IF NOT EXISTS paid_users (user_id INTEGER PRIMARY KEY, paid_at TEXT DEFAULT (datetime('now')))")
            conn.commit()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")

def mark_user_paid(user_id: int):
    try:
        with sqlite3.connect("users.db") as conn:
            conn.execute("INSERT OR IGNORE INTO paid_users (user_id) VALUES (?)", (user_id,))
            conn.commit()
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –æ–ø–ª–∞—Ç–∏–≤—à–∏–π")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –ë–î –¥–ª—è user_id={user_id}: {e}")

def is_user_paid(user_id: int) -> bool:
    try:
        with sqlite3.connect("users.db") as conn:
            cursor = conn.execute("SELECT 1 FROM paid_users WHERE user_id = ?", (user_id,))
            result = cursor.fetchone()
        logger.debug(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã –¥–ª—è user_id={user_id}: {'–æ–ø–ª–∞—Ç–∏–ª' if result else '–Ω–µ –æ–ø–ª–∞—Ç–∏–ª'}")
        return result is not None
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–ª–∞—Ç—ã user_id={user_id}: {e}")
        return False

# === FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ===
app = FastAPI()

@app.on_event("startup")
async def on_startup():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    init_db()
    try:
        await telegram_app.initialize()
        await telegram_app.start()
        webhook_url = f"{WEBHOOK_URL}/webhook"
        await telegram_app.bot.set_webhook(webhook_url)
        logger.info(f"‚úÖ –í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
    except Exception as e:
        logger.critical(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ–±—Ö—É–∫–∞: {e}")
        raise

@app.on_event("shutdown")
async def on_shutdown():
    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    await telegram_app.stop()

# === –ú–∞—Ä—à—Ä—É—Ç—ã ===
@app.get("/")
async def root():
    logger.debug("üåê GET / ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏")
    return {"status": "running", "message": "Bot is online"}

@app.post("/webhook")
async def webhook(request: Request):
    try:
        json_data = await request.json()
        logger.info(f"üì• –ü–û–õ–£–ß–ï–ù –í–ï–ë–•–£–ö: {json.dumps(json_data, ensure_ascii=False, indent=2)}")
        update = Update.de_json(json_data, telegram_app.bot)
        await telegram_app.process_update(update)
        return {"ok": True}
    except Exception as e:
        logger.error(f"‚ùå –û–®–ò–ë–ö–ê –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
        return {"ok": False}

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} ({update.effective_user.full_name}) –≤—ã–∑–≤–∞–ª /start")
    keyboard = [[InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å 0.0005 BTC", callback_data="pay")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ /random.",
        reply_markup=reply_markup
    )
    logger.debug("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –æ–ø–ª–∞—Ç—ã")

# === –ö–æ–º–∞–Ω–¥–∞ /random ===
async def random_number(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    logger.info(f"üé≤ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª /random")
    if not is_user_paid(user_id):
        logger.warning(f"üîí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –æ–ø–ª–∞—Ç–∏–ª ‚Äî –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        await update.message.reply_text("üîí –°–Ω–∞—á–∞–ª–∞ –æ–ø–ª–∞—Ç–∏—Ç–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É /start")
        return
    import random
    number = random.randint(1, 100)
    await update.message.reply_text(f"üéâ –í–∞—à–µ —á–∏—Å–ª–æ: {number}")
    logger.info(f"‚úÖ –í—ã–¥–∞–Ω–æ —á–∏—Å–ª–æ {number} –¥–ª—è user_id={user_id}")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã ===
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    username = query.from_user.full_name
    logger.info(f"üñ±Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({username}) –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É: {query.data}")

    if query.data != "pay":
        logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞: {query.data}")
        await query.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
        return

    logger.info(f"üí∏ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è user_id={user_id}")
    try:
        payment_data = {
            "merchant_username": MERCHANT_USERNAME,
            "item_description": "–î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É",
            "amount1": "0.0005",
            "currency1": "BTC",
            "currency2": "",
            "custom": str(user_id),
            "callback_url": f"{WEBHOOK_URL}/faucetpay_ipn",
            "success_url": f"{WEBHOOK_URL}/success",
            "cancel_url": f"{WEBHOOK_URL}/cancel",
        }
        logger.debug(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞: {payment_data}")

        async with httpx.AsyncClient(follow_redirects=True, timeout=15.0) as client:
            resp = await client.post(
                "https://faucetpay.io/merchant/webscr",
                data=payment_data
            )
            logger.info(f"üè¶ –û—Ç–≤–µ—Ç –æ—Ç FaucetPay: —Å—Ç–∞—Ç—É—Å={resp.status_code}")
            logger.debug(f"üì• –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {resp.text[:500]}...")

            if resp.status_code != 200:
                logger.error(f"‚ùå FaucetPay –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {resp.status_code}")
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç—ë–∂. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return

            payment_url = str(resp.url)
            logger.info(f"‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∞: {payment_url}")

            try:
                await query.edit_message_text(
                    f"‚úÖ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n\nüëâ <a href='{payment_url}'>–û–ø–ª–∞—Ç–∏—Ç—å</a>",
                    parse_mode="HTML",
                    disable_web_page_preview=False
                )
                logger.info(f"üì§ –°—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            except Exception as e:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
                await query.message.reply_text(
                    f"‚úÖ –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n\nüëâ <a href='{payment_url}'>–û–ø–ª–∞—Ç–∏—Ç—å</a>",
                    parse_mode="HTML"
                )

    except Exception as e:
        logger.critical(f"üí• –§–ê–¢–ê–õ–¨–ù–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è user_id={user_id}: {type(e).__name__}: {e}")
        try:
            await query.message.reply_text("‚ùå –°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except:
            pass

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ IPN –æ—Ç FaucetPay ===
@app.post("/faucetpay_ipn")
async def faucetpay_ipn(
    token: str = Form(...),
    merchant_username: str = Form(...),
    custom: str = Form(...),
    status: str = Form(...),
    transaction_id: str = Form(...),
    amount1: str = Form(...),
    currency1: str = Form(...),
):
    logger.info(f"üîî –ü–û–õ–£–ß–ï–ù IPN: token={token}, custom={custom}, status={status}, amount={amount1} {currency1}")
    logger.debug(f"üìã –í—Å–µ –¥–∞–Ω–Ω—ã–µ IPN: merchant={merchant_username}, txid={transaction_id}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ä—á–∞–Ω—Ç–∞
    if merchant_username != MERCHANT_USERNAME:
        logger.error(f"‚ùå IPN: –ù–µ–≤–µ—Ä–Ω—ã–π –º–µ—Ä—á–∞–Ω—Ç: {merchant_username}")
        raise HTTPException(status_code=400, detail="Invalid merchant")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
    try:
        async with httpx.AsyncClient(timeout=10.0) as client:
            token_check_url = f"https://faucetpay.io/merchant/get-payment/{token}"
            logger.debug(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞: GET {token_check_url}")
            resp = await client.get(token_check_url)
            logger.debug(f"üì• –û—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–æ–∫–µ–Ω–∞: {resp.text}")
            token_data = resp.json()
            if not token_data.get("valid", False):
                logger.error(f"‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω: {token}")
                raise HTTPException(status_code=400, detail="Invalid token")
            logger.info("‚úÖ –¢–æ–∫–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω")
    except Exception as e:
        logger.critical(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        raise HTTPException(status_code=400, detail="Token check failed")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
    if status.lower() != "completed":
        logger.warning(f"‚ö†Ô∏è –ü–ª–∞—Ç—ë–∂ –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω: —Å—Ç–∞—Ç—É—Å={status}")
        return {"status": "ok"}

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã
    try:
        user_id = int(custom)
        logger.info(f"üí∞ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –ø–ª–∞—Ç—ë–∂ –¥–ª—è user_id={user_id}")
        mark_user_paid(user_id)
        await telegram_app.bot.send_message(
            chat_id=user_id,
            text=f"‚úÖ –û–ø–ª–∞—Ç–∞ {amount1} {currency1} –ø—Ä–æ—à–ª–∞!\n\n–¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω /random üé≤",
            disable_notification=True
        )
        logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except ValueError:
        logger.error(f"‚ùå IPN: –ù–µ–≤–µ—Ä–Ω—ã–π custom ID: {custom}")
        raise HTTPException(status_code=400, detail="Invalid user_id")
    except Exception as e:
        logger.critical(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        raise HTTPException(status_code=500, detail="Internal error")

    return {"status": "ok"}

# === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ===
telegram_app.add_handler(CommandHandler("start", start))
telegram_app.add_handler(CommandHandler("random", random_number))
telegram_app.add_handler(CallbackQueryHandler(button_handler))

# === –ó–∞–ø—É—Å–∫ (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞) ===
if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=5000)
