import os
import logging
import random
from fastapi import FastAPI, Request
from fastapi.responses import FileResponse, HTMLResponse
from pydantic import BaseModel
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from telegram.constants import ParseMode

# ========= CONFIG ==========
TOKEN = os.getenv("TELEGRAM_TOKEN")
MERCHANT_USERNAME = os.getenv("MERCHANT_USERNAME", "merchant_default")
PORT = int(os.getenv("PORT", 5000))

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ========= TELEGRAM APP ==========
app_telegram: Application | None = None


async def start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–•—ç–Ω–¥–ª–µ—Ä /start"""
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç.\n"
        "–•–æ—á–µ—à—å —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ? –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /pay."
    )


async def pay_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–•—ç–Ω–¥–ª–µ—Ä /pay ‚Äî –æ—Ç–¥–∞—ë–º —Å—Å—ã–ª–∫—É –Ω–∞ HTML —Ñ–æ—Ä–º—É –æ–ø–ª–∞—Ç—ã"""
    chat_id = update.effective_chat.id
    payment_url = f"https://random-number-bot-1.onrender.com/payment?chat_id={chat_id}"
    await update.message.reply_text(
        f"–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞ –ø–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –æ–ø–ª–∞—Ç–∏:\n\n{payment_url}"
    )


async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏–º–µ—Ä ‚Äî –ø–æ–∑–∂–µ —Ç—É—Ç –º–æ–∂–Ω–æ –æ—Ç–¥–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∏–ª–∏ —á—Ç–æ-—Ç–æ –µ—â–µ"""
    await update.message.reply_text("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –°–µ–π—á–∞—Å —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —á–∏—Å–ª–æ...")


# ========= FASTAPI ==========
app = FastAPI()


@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram application –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ FastAPI."""
    global app_telegram

    logger.info("Initializing Telegram Bot Application...")
    app_telegram = (
        Application.builder()
        .token(TOKEN)
        .parse_mode(ParseMode.HTML)
        .concurrent_updates(True)
        .build()
    )

    # === –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö—ç–Ω–¥–ª–µ—Ä—ã ===
    app_telegram.add_handler(CommandHandler("start", start_handler))
    app_telegram.add_handler(CommandHandler("pay", pay_handler))

    await app_telegram.initialize()
    logger.info("Telegram Bot initialized ‚úÖ")


class TelegramRequest(BaseModel):
    update_id: int | None = None  # dummy –ø–æ–ª–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏


@app.post("/webhook")
async def telegram_webhook(req: Request):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ø–¥–µ–π—Ç–æ–≤ –æ—Ç Telegram"""
    try:
        data = await req.json()
        logger.debug(f"Webhook payload: {data}")
        update = Update.de_json(data, app_telegram.bot)
        if update:
            await app_telegram.process_update(update)
        return {"status": "ok"}
    except Exception as e:
        logger.error(f"Error in webhook: {str(e)}")
        return {"status": "error", "detail": str(e)}


@app.get("/", response_class=HTMLResponse)
async def root():
    return "<h3>Bot is alive üöÄ</h3>"


@app.get("/payment")
async def get_payment_page(chat_id: str):
    """–û—Ç–¥–∞—ë–º —Ç–≤–æ—é HTML —Ñ–æ—Ä–º—É –æ–ø–ª–∞—Ç—ã, –≤ custom –≤—Å—Ç–∞–≤–∏–º chat_id"""
    # –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∞–π–ª, script –≤–Ω—É—Ç—Ä–∏ —Å–∞–º –ø–æ–¥—Å—Ç–∞–≤–∏—Ç `chat_id`
    return FileResponse("payment.html")


@app.post("/callback")
async def payment_callback(req: Request):
    """
    Callback –æ—Ç FaucetPay –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞.
    –í req.json/req.form –¥–æ–ª–∂–Ω—ã –ø—Ä–∏–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ, –≤–∫–ª—é—á–∞—è custom (chat_id).
    """
    try:
        form = await req.form()
    except:
        form = {}

    chat_id = form.get("custom")
    status = form.get("status")  # —É FaucetPay –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å

    logger.info(f"Payment callback received: {form}")

    if chat_id:
        try:
            random_number = random.randint(1, 1000)
            text = f"üí∞ –ü–ª–∞—Ç—ë–∂ –ø–æ–ª—É—á–µ–Ω!\n–¢–≤–æ—ë —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ: <b>{random_number}</b>"
            await app_telegram.bot.send_message(chat_id=chat_id, text=text, parse_mode="HTML")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")

    return {"status": "ok"}


@app.get("/success")
async def success_page():
    return HTMLResponse("<h2>‚úÖ –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞! –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –≤ Telegram –ë–æ—Ç</h2>")


@app.get("/cancel")
async def cancel_page():
    return HTMLResponse("<h2>‚ùå –ü–ª–∞—Ç—ë–∂ –æ—Ç–º–µ–Ω—ë–Ω!</h2>")
