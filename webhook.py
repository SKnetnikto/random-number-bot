import logging
import os
import random
from fastapi import FastAPI, Request
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, Defaults
from telegram.constants import ParseMode

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger("bot")

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # –Ω–∞–ø—Ä–∏–º–µ—Ä https://–∏–º—è.onrender.com
MERCHANT_USERNAME = os.getenv("MERCHANT_USERNAME")  # —Ç–≤–æ–π FaucetPay merchant tag

# –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ FastAPI
app = FastAPI()

# Telegram Application
telegram_app = (
    ApplicationBuilder()
    .token(TELEGRAM_TOKEN)
    .defaults(Defaults(parse_mode=ParseMode.HTML))
    .build()
)

# –ü—Ä–æ—Å—Ç–∞—è –ø–∞–º—è—Ç—å –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö (id -> True)
paid_users = {}


# ----------------- –ö–æ–º–∞–Ω–¥—ã -----------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç —Å —Ñ—É–Ω–∫—Ü–∏–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞ üé≤\n\n"
        "–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–º, –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –æ–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ FaucetPay.\n\n"
        f"üëâ –û—Ç–ø—Ä–∞–≤—å –æ–ø–ª–∞—Ç—É –Ω–∞ –º–µ—Ä—á–∞–Ω—Ç-–∞–∫–∫–∞—É–Ω—Ç: <b>{MERCHANT_USERNAME}</b>\n\n"
        "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /confirm, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É."
    )
    await update.message.reply_text(text)


async def confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–§–∏–∫—Ç–∏–≤–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã (–Ω–∞ –¥–µ–ª–µ –∑–¥–µ—Å—å –Ω–∞–¥–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å FaucetPay API)."""
    user_id = update.effective_user.id
    paid_users[user_id] = True
    await update.message.reply_text("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è /random –∏ /coinflip.")


async def random_number(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–ø–ª–∞—Ç–∏–≤—à–∏–º."""
    user_id = update.effective_user.id
    if paid_users.get(user_id):
        number = random.randint(1, 100)
        await update.message.reply_text(f"üé≤ –¢–≤–æ—ë —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ: <b>{number}</b>")
    else:
        await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç. –°–Ω–∞—á–∞–ª–∞ –æ–ø–ª–∞—Ç–∏ —á–µ—Ä–µ–∑ FaucetPay –∫–æ–º–∞–Ω–¥–æ–π /start.")


async def coinflip(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥–±—Ä–∞—Å—ã–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç–∫–∏ (–±–µ—Å–ø–ª–∞—Ç–Ω–∞—è —Ñ–∏—á–∞)."""
    result = random.choice(["–û—Ä–µ–ª ü¶Ö", "–†–µ—à–∫–∞ üëë"])
    await update.message.reply_text(f"ü™ô –ú–æ–Ω–µ—Ç–∫–∞ –ø–æ–∫–∞–∑–∞–ª–∞: {result}")


# ----------------- –†–æ—É—Ç—ã –±–æ—Ç–∞ -----------------
telegram_app.add_handler(CommandHandler("start", start))
telegram_app.add_handler(CommandHandler("confirm", confirm))
telegram_app.add_handler(CommandHandler("random", random_number))
telegram_app.add_handler(CommandHandler("coinflip", coinflip))


# ----------------- Webhook -----------------
@app.post("/webhook")
async def webhook_handler(request: Request):
    data = await request.json()
    update = Update.de_json(data, telegram_app.bot)
    await telegram_app.process_update(update)
    return {"ok": True}


# ----------------- Startup -----------------
@app.on_event("startup")
async def on_startup():
    webhook_url = f"{WEBHOOK_URL}/webhook"
    await telegram_app.bot.set_webhook(webhook_url)
    logger.info(f"Webhook set to {webhook_url}")
    await telegram_app.initialize()
    await telegram_app.start()


@app.on_event("shutdown")
async def on_shutdown():
    await telegram_app.stop()
    await telegram_app.shutdown()
