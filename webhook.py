import logging
import os
import random
import httpx
from fastapi import FastAPI, Request, Form
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, Defaults
from telegram.constants import ParseMode

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger("bot")

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # https://your-app.onrender.com
MERCHANT_USERNAME = os.getenv("MERCHANT_USERNAME")
API_KEY = os.getenv("FAUCETPAY_API_KEY")  # —Å–æ–∑–¥–∞–µ—Ç—Å—è –≤ FaucetPay Merchant

# FastAPI app
app = FastAPI()

# Telegram Application
telegram_app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

# –ü—Ä–æ—Å—Ç–∞—è –ø–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (id -> True –µ—Å–ª–∏ –æ–ø–ª–∞—Ç–∏–ª)
paid_users = {}


# ---------- –ö–æ–º–∞–Ω–¥—ã ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç —Å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–º —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª üé≤\n\n"
        "üëâ –ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–º, –æ–ø–ª–∞—Ç–∏—Ç–µ –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ FaucetPay.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã."
    )
    keyboard = InlineKeyboardMarkup(
        [[InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ FaucetPay", callback_data="pay")]]
    )
    await update.message.reply_text(text, reply_markup=keyboard)


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "pay":
        user_id = query.from_user.id

        # —Å–æ–∑–¥–∞—ë–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ FaucetPay Merchant
        async with httpx.AsyncClient() as client:
            resp = await client.post(
                "https://faucetpay.io/merchant/create-payment",
                data={
                    "merchant_username": MERCHANT_USERNAME,
                    "item_description": "–î–æ—Å—Ç—É–ø –∫ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—É —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª",
                    "amount1": "0.0005",   # —Å—É–º–º–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä BTC)
                    "currency1": "BTC",    # –≤–∞–ª—é—Ç–∞, –∫–æ—Ç–æ—Ä—É—é –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—Ä–æ–¥–∞–≤–µ—Ü
                    "custom": str(user_id),  # –ø–µ—Ä–µ–¥–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    "callback_url": f"{WEBHOOK_URL}/faucetpay_ipn",  # –∫—É–¥–∞ –ø—Ä–∏–¥–µ—Ç –æ–ø–ª–∞—Ç–∞
                    "success_url": f"{WEBHOOK_URL}/success",
                    "cancel_url": f"{WEBHOOK_URL}/cancel",
                    "api_key": API_KEY,
                },
            )
        
        data = resp.json()
        if data.get("status") == 200:
            payment_url = data["data"]["link"]
            await query.edit_message_text(
                f"‚úÖ –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∞!\n\nüëâ <a href='{payment_url}'>–ü–µ—Ä–µ–π–¥–∏—Ç–µ —Å—é–¥–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã</a>",
                parse_mode="HTML",
            )
        else:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞.")


async def random_number(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if paid_users.get(user_id):
        number = random.randint(1, 100)
        await update.message.reply_text(f"üé≤ –¢–≤–æ—ë —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ: <b>{number}</b>", parse_mode="HTML")
    else:
        await update.message.reply_text("üö´ –°–Ω–∞—á–∞–ª–∞ –æ–ø–ª–∞—Ç–∏—Ç–µ –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ /start.")


async def coinflip(update: Update, context: ContextTypes.DEFAULT_TYPE):
    result = random.choice(["–û—Ä–µ–ª ü¶Ö", "–†–µ—à–∫–∞ üëë"])
    await update.message.reply_text(f"ü™ô –ú–æ–Ω–µ—Ç–∫–∞ –ø–æ–∫–∞–∑–∞–ª–∞: {result}")


# ---------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ----------
telegram_app.add_handler(CommandHandler("start", start))
telegram_app.add_handler(CommandHandler("random", random_number))
telegram_app.add_handler(CommandHandler("coinflip", coinflip))
telegram_app.add_handler(
    telegram.ext.CallbackQueryHandler(button_handler)
)


# ---------- IPN –æ—Ç FaucetPay ----------
@app.post("/faucetpay_ipn")
async def faucetpay_ipn(
    merchant_username: str = Form(...),
    custom: str = Form(...),
    status: str = Form(...),
    transaction_id: str = Form(...),
    amount1: str = Form(...),
    currency1: str = Form(...),
):
    """
    Callback –æ—Ç FaucetPay –ø–æ—Å–ª–µ –ø–ª–∞—Ç–µ–∂–∞.
    Custom = ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram.
    Status = completed –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ.
    """
    if merchant_username == MERCHANT_USERNAME and status.lower() == "completed":
        try:
            user_id = int(custom)
            paid_users[user_id] = True
            # —É–≤–µ–¥–æ–º–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–ª–µ–≥–µ
            await telegram_app.bot.send_message(
                chat_id=user_id,
                text=f"‚úÖ –û–ø–ª–∞—Ç–∞ {amount1} {currency1} –ø–æ–ª—É—á–µ–Ω–∞!\n\n–¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω /random üé≤",
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ IPN: {e}")

    return {"status": "ok"}


# ---------- Webhook –æ—Ç Telegram ----------
@app.post("/webhook")
async def telegram_webhook(request: Request):
    data = await request.json()
    update = Update.de_json(data, telegram_app.bot)
    await telegram_app.process_update(update)
    return {"ok": True}


# Startup / Shutdown
@app.on_event("startup")
async def on_startup():
    await telegram_app.bot.set_webhook(f"{WEBHOOK_URL}/webhook")
    await telegram_app.initialize()
    await telegram_app.start()
    logger.info("Bot started and webhook set.")


@app.on_event("shutdown")
async def on_shutdown():
    await telegram_app.stop()
    await telegram_app.shutdown()
